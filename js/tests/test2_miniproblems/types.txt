'' + 1 + 0______'10'
true + false______0
6 / "3"______
"2" * "3"______
4 + 5 + "px"______'9px'
"$" + 4 + 5______'$9'
"4" - 2______
"4px" - 2______
7 / 0______und
{}[0]______
parseInt("09")______
5 && 2______2
2 && 5______5
5 || 0______5
0 || 5______0
[[0]][0][0]______

'' + 1 + 0 = "10"  -сначала складывается строка ("") и число (1), потом складывается получившаяся строка ("1") и число (0) получается строка 10.
true + false = 1 - математическая операция, все преобразовывается к числам
6 / "3" = 2 - математическая операция, все преобразовывается к числам
"2" * "3" = 6 - математическая операция, все преобразовывается к числам
4 + 5 + "px" = "9px" - сначала складываются числа (4+5) потом результат с строкой - в результате получается строка
"$" + 4 + 5  = "$45" - сначала получается строка, потом опять "$4" + 5 приводит к строке
"4" - 2  = 2 - математическая операция, все преобразовывается к числам
"4px" - 2  = NaN  - математическая операция, все преобразовывается к числам, но "4px" не может быть преобразовано к числу, поэтому NaN
7 / 0  = Infinity - деление на 0, даст всегда бесконечность
{}[0]  = undefined // (1)
parseInt("09")  = "0" или "9" // (2)
5 && 2  = 2 - преобразовываются в логические типы, проверяет чтобы оба элемента были  true, поэтому возвращает последний true элемент
2 && 5  = 5 - преобразовываются в логические типы, проверяет чтобы оба элемента были true, поэтому возвращает последний true элемент
5 || 0  = 5 - преобразовываются в логические типы, проверяет чтобы хотя бы один элемент был true, поэтому возвращает первый true элемент
0 || 5 = 5 - преобразовываются в логические типы, проверяет чтобы хотя бы один элемент был true, поэтому возвращает первый true элемент
[[0]][0][0] = 0 // (3)

Фигурные скобки — это создание пустого объекта, у него нет свойства <code>'0'</code>.
В некоторых браузерах parseInt без второго аргумента интерпретирует 09 как восьмиричное число.<code> [[0]]</code> — это вложенный массив <code>[0]</code> внутри внешнего <code>[ ]</code>
