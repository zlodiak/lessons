====================================================================================
сначала нужно установить требуемые библиотеки:
apt-get install libcurl4-gnutls-dev libexpat1-dev gettext libz-dev libssl-dev

====================================================================================
далее нужно установить гит из исходников или как бинарный пакет:
http://git-scm.com/download
$ tar -zxf git-1.7.2.2.tar.gz
$ cd git-1.7.2.2
$ make prefix=/usr/local all
$ sudo make prefix=/usr/local install
После этого вы можете скачать Git с помощью самого Git'а, чтобы получить обновления:
$ git clone git://git.kernel.org/pub/scm/git/git.git

Если же у вас дистрибутив, основанный на Debian, например, Ubuntu, попробуйте apt-get:
$ apt-get install git

====================================================================================
В состав Git'а входит утилита git config, которая позволяет просматривать и устанавливать параметры, контролирующие все аспекты работы Git'а и его внешний вид. Эти параметры могут быть сохранены в трёх местах:

Файл /etc/gitconfig содержит значения, общие для всех пользователей системы и для всех их репозиториев. Если при запуске git config указать параметр --system, то параметры будут читаться и сохраняться именно в этот файл.

Файл ~/.gitconfig хранит настройки конкретного пользователя. Этот файл используется при указании параметра --global.

Конфигурационный файл в каталоге Git'а (.git/config) в том репозитории, где вы находитесь в данный момент.

====================================================================================
настроим гит:персональные данные:
$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com
Повторюсь, что, если указана опция --global, то эти настройки достаточно сделать только один раз, 

редактор укажем:
$ git config --global core.editor emacs

параметры для символов окончаний строк для пользователей Unix/Mac:
git config --global core.autocrlf input
git config --global core.safecrlf true

вывод всех настроек:
git config --list

в конфиге прописать алиасы:
[alias]
	co = checkout
	ci = commit
	st = status
	br = branch
	hist = log --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short
	type = cat-file -t
	dump = cat-file -p	

====================================================================================
перейти в целевой каталог и создать гит-репозиторий:
$ git init
Эта команда создаёт в текущем каталоге новый подкаталог с именем .git содержащий все необходимые файлы репозитория — основу Git-репозитория. 


====================================================================================
проиндексируем существующие файлы:
$ git add *.c
$ git add README
$ git commit -m 'initial project version'

индексировать нужно перед каждым коммитом

список коммитов смотреть так:
git log

====================================================================================
создать новую ветку:
$ git branch testing

но это не значит, что мы переключились на неё


создать новую ветку и переключиться на неё:
$ git checkout -b iss53
Switched to a new branch "iss53"

====================================================================================
перейдём на новую ветку:
$ git checkout testing

====================================================================================
Давайте перейдём обратно на ветку master:
$ git checkout master

====================================================================================
можно не создавать ветки, а использовать одну. в этом случае переходить по началу хэша
git checkout weq3e

а смотреть все доступные версии:
git hist --all

====================================================================================
переходить можно и по тегам, а не по хэшу:
git tag v1
при этом нужно находиться в целевой версии

чтобы перейти git checkout v1

====================================================================================
генерация открытого и закрытого ключа:
зайти в целевой каталог(можно создать )
$ ssh-keygen

запросит имя файла
так же запросит контрольную фразу(с подтверждением). наверное это пароль. говорят, что можно оставить пустым. но по-моему не стоит.

в результате создастся просто файл и файл.pub
в них будет закрытый ключи и открытый соответственно

====================================================================================
залить код в репозиторий на гитхабе:

сначала добавить публичный ключ(пункт settings):
In the user bar in the top-right corner of any page, click .
SSH Keys menuClick SSH Keys in the left sidebar.
SSH Key buttonClick Add SSH key.
In the Title field, add a descriptive label for the new key. For example, if you're using a personal Mac, you might call this key "Personal MacBook Air".
The key fieldPaste your key into the "Key" field.
The Add key buttonClick Add key.
Confirm the action by entering your GitHub password.

затем создать репозиторий(в верхней панельке аккаунта гитхаба есть опция)

затем из консоли своей машины отправить код(спросят логин и пароль от аккаунта гитхаба):

git remote add origin https://github.com/zlodiak/drummersaransk_new.git
git push -u origin master

последующиие пуши делать так:
$ git push origin HEAD:master

====================================================================================
В файл .gitignore добавьте строчку "db.sqlite3" и БД не будет попадать в коммиты, и соотвественно публиковаться на гитхабе.

====================================================================================
общий порядок закачки в удалённый репозиторий:
создать репозиторий на локальной машине
индексировать файлы
закоммитить
зарегистрироваться на гитхабе
создать репозиторий через граф интерфейс в личном кабинете
на локальной машине сгенерировать ключи
публичный ключ прописать в личном кабинете

сделать первый пуш:
git remote add origin https://github.com/zlodiak/drummersaransk_new.git
git remote add origin https://github.com/zlodiak/msend.git

git push -u origin master

или В КРАЙНЕМ СЛУЧАЕ:
git remote add github https://github.com/zlodiak/zapsum_new.git
git remote add origin https://github.com/zlodiak/django-kalinin-mailsender.git


git push -u origin master


следующие пуши:
$ git push origin HEAD:master
или так:
git push origin master
но первый пуш обязательно с ключом -u


если не соласовываются изменения из репозиториев или имеют место другие непонятные проблемы, то проще удалить репозиторий на удалённой машине и залить заново:
git remote rm origin
git remote add origin https://github.com/zlodiak/drummersaransk_new.git
git remote add origin https://github.com/zlodiak/ebay.git
git push -u origin master


если происходит непонятная фигня и пишется, что уже существиет репозиторий, то читать здесь:
http://stackoverflow.com/questions/1221840/remote-origin-already-exists-on-git-push-to-new-repository


====================================================================================
чтобы слить ветки нужно перейти в master-ветку и написать хэш той, с которой сливают
git merge 34df67f

====================================================================================
создать метку(кстати она необходима при откате назад чтобы присутствовать в истории):
находясь в целевом коммите выполнить:
git tag -a tt -m 'test tag'

при этом -m 'test tag' обязательный флаг. если его не использовать, то будет предложено добавить описание, используя текстовый редактор.

====================================================================================
master - это указатель, который указывает на последний коммит главной ветки. соответственно, другие метки указывают на последний коммит своей ветки.

важно!
 важные коммиты должны принадлежать определенной ветке. в противном случае при откате истории назад они не будут видны в логе(если не помечены тегом), а через 2 недели вообще удалятся гитом

====================================================================================
если нужно откатиться назад, то можно отменить последнюю версию(чтобы указатель master не оставался вверху)

я работал над проектом и в git вёл одну ветку(master).затем наделал ошибок в коде проекта и решил откатиться. но указатель master остался на последней версии проекта(которая с ошибками)

выглядит история так:

* a4a46c8 2014-11-20 | fff (master) [sergey kalinin]
* 6ffa5ec 2014-11-20 | feedback fix (HEAD) [sergey kalinin]
* f163b91 2014-11-20 | before wysiwyg add [sergey kalinin]
* bdd0ce3 2014-11-11 | email ok [sergey kalinin]
* fac4f74 2014-11-10 | menu rus [sergey kalinin]
здесь fff это версия проекта с ошибками, которая мне не нужна. а feedback fix это версия, на которую я хотел бы откатиться

проблема, как видите, в том, что я переместился при помощи checkout в feedback fix, но указатель master остался на самой последней версии проекта. теперь я не могу сохранять новые версии

помогите пожалуйста переместить master на feedback fix


решение:

git chekout master

git revert a4a46c8



https://www.linux.org.ru/forum/general/11055554

====================================================================================
откутиться можно дёстко(с удалением последних коммитов полностью) и мягко(с сохранением их)

жёсткий откат:
* e1b2164 2014-12-03 | fff (master) [Your Name]
* 9c89147 2014-12-03 | install ok [Your Name]
* b5cb3df 2014-12-03 | shop install (HEAD) [Your Name]
* 1930223 2014-12-03 | first commit [Your Name]

git co --hard b5cb3df

(shoptest_env)kalinin@kalinin ~/.virtualenvs/shoptest_project/shoptest $ git hist --all
* b5cb3df 2014-12-03 | shop install (HEAD, master) [Your Name]
* 1930223 2014-12-03 | first commit [Your Name]



====================================================================================
====================================================================================
Чтобы посмотреть, какому URL соответствует сокращённое имя в Git, можно указать команде опцию -v:

$ git remote -v
origin  git://github.com/schacon/ticgit.git (fetch)
origin  git://github.com/schacon/ticgit.git (push)

при этом находиться нужно в каталоге проекта(который содержит каталог .git)

====================================================================================
Чтобы добавить новый удалённый Git-репозиторий под именем-сокращением, к которому будет проще обращаться, выполните git remote add [сокращение] [url]:

$ git remote
origin
$ git remote add pb git://github.com/paulboone/ticgit.git
$ git remote -v
origin  git://github.com/schacon/ticgit.git
pb  git://github.com/paulboone/ticgit.git



git remote add origin https://github.com/zlodiak/shoptest.git

Теперь вы можете использовать в командной строке имя pb вместо полного URL. Например, если вы хотите извлечь (fetch) всю информацию, которая есть в репозитории Павла, но нет в вашем, вы можете выполнить git fetch pb:

====================================================================================
Когда вы хотите поделиться своими наработками, вам необходимо отправить (push) их в главный репозиторий. 
Команда для этого действия простая: git push [удал. сервер] [ветка]. 
$ git push origin master

Эта команда срабатывает только в случае, если вы клонировали с сервера, на котором у вас есть права на запись, и если никто другой с тех пор не выполнял команду push. Если вы и кто-то ещё одновременно клонируете, затем он выполняет команду push, а затем команду push выполняете вы, то ваш push точно будет отклонён. Вам придётся сначала вытянуть (pull) их изменения и объединить с вашими. Только после этого вам будет позволено выполнить push

====================================================================================



====================================================================================
====================================================================================
====================================================================================
====================================================================================
====================================================================================
====================================================================================
====================================================================================
====================================================================================
====================================================================================
====================================================================================
====================================================================================
====================================================================================
====================================================================================
====================================================================================
====================================================================================
====================================================================================
====================================================================================
====================================================================================
====================================================================================
====================================================================================
====================================================================================
====================================================================================
====================================================================================
====================================================================================
====================================================================================

git remote add origin https://github.com/zlodiak/django-kalinin-mailsender.git
git remote add origin https://github.com/zlodiak/bootstrap_gr_test.git