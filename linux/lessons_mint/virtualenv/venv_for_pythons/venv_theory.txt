VIRTUALENV: ВИРТУАЛЬНЫЕ ОКРУЖЕНИЯ
Много у вас разных питонячих проектов работают на одном сервере? У меня вот да. Все ли они использую одни и те же библиотеки или версии библиотек? Нет. Так как сделать, чтобы можно было удобно поддерживать всё это многообразие?

Давным дано я предлагал один вариант - использовать svn:externals и таскать зависимости (код сторонних библиотек и приложений) с собой. Но такой способ очень ограничен в своем применении. Вы должны использовать VCS (subversion или иные поддерживающие аналогичные концепции) для развертывания проекта на сервере и все зависимости тоже должны быть доступны в той же системе контроля версий. Но так случается очень редко. Да и потом далеко не всегда VCS вообще используются для выкладки проектов. Пакетные системы во многих случаях удобней.

Создание изолированных окружений задача довольно давнишняя. И в питонячем мире решается разными способами уже давно. Одним из инструментов является - virtualenv.

Создать окружение просто:

virtualenv myenv
После выполнения этой команды создается директория myenv в который находится некое подмножество unix-like корневой файловой системы. В директории myenv/bin будет лежать бинарник питона, и несколько дополнительных скриптов. В myenv/lib - дерево каталогов, повторяющее оное у текущего установленного питона в системе.

Для того чтобы питонячий код работал в этом окружении, его надо запускать, используя myenv/bin/python, или подключив к своему скрипту вспомогательный модуль myenv/bin/activate.

Так же в myenv/bin будет специальный easy_install скрипт, через который можно устанавливать в это окружение дополнительные пакеты.

На самом деле это окружение не совсем изолированное. Если какой-то пакет не установлен в нем самом, то будет использован тот который установлен глобально в системе (если там он всё-таки есть). В большинстве случаев это удобно. Имеет смысл железобетонные пакеты, которые не часто обновляются, иметь не в каждом окружении отдельно, а глобально в системе, чтобы все могли им пользоваться.

Но это окно в глобальный мир можно закрыть - достаточно при создании окружения указать опцию --no-site-packages. В таком случае доступ из окружение к глобально установленным пакетам будет закрыт.

Я стал применять virtualenv относительно недавно. В момент когда решил занять кардинальной перестройкой блога. На прошлом своем опыте я понял, что иметь независимые инстансы проекта на одном сервере это насущная необходимость для удобной разработки, тестирования и выкладки в мир.

Причем при таком подходе я смог добиться повторяемости установок - я могу установить неограниченное число инстансов проекта на один сервер с нуля. И все они будут независимы друг от друга и изменения в одном никак не затрагивают другие.

Построив систему на базе независимых окружений совместно с pip и fabric, поддерживать и развивать весь зоопарк проектов стало значительно легче. Рекомендую.


===================================================================================
для удобной смены среды окружения(и версии питона) можно использовать virtualenv и virtualwrapper
Virtualenv — позволяет для каждого проекта создать своё окружение питонячьих пакетов.

посмотреть куда установлен virtualenv можно так:
whereis virtualenv

Для установки virtualenv набираем в терминале:
     sudo apt-get install python-virtualenv

Создаем папку, внутри которой будут храниться папки будущих виртуальных окружений.
     mkdir .virtualenvs

Для более удобной работы с virtualenv рекомендуется поставить утилиту под названием virtualenvwrapper. 
    sudo apt-get install virtualenvwrapper


для настройки virtualenvwrapper на нашу папку с виртуальными окружениями, добавляем следующий текст в файл ~/.profile (чтобы эти настрйоки выполнялись при каждой загрузке компа):
    export WORKON_HOME=$HOME/.virtualenvs
    source /etc/bash_completion.d/virtualenvwrapper


Теперь работа с виртуальными окружениями стала еще проще:
    mkvirtualenv env_name1     - создать в папке с вирт.окружениями окружение "env_name1"
    workon env_name1              - переключится в окружение "env_name1"
    lsvirtualenv                           - вывести список доступных виртуальных окружений
    rmvirtualenv env_name1      - удалить виртуальное окружение "env_name1"
    deactivate                              - выйти из текущего виртуального окружения



или можно, находясь в каталоге .virtualenvs , создать вирт окружение с определённой версией питона:
virtualenv qqq3 --python=python3

===================================================================================
проверить версию питона:

kalinins@kalinins-Lenovo-Z580 ~/.virtualenvs $ python --version
Python 2.7.6
kalinins@kalinins-Lenovo-Z580 ~/.virtualenvs $ workon zapsum
(zapsum)kalinins@kalinins-Lenovo-Z580 ~/.virtualenvs $ python --version
Python 3.4.0


===================================================================================
настройка проекта:

в .profile нужно дописать:
export WORKON_HOME=$HOME/.virtualenvs/blogik5_project
export PROJECT_HOME=$HOME/.virtualenvs/blogik5_project/blogik5
source /etc/bash_completion.d/virtualenvwrapper


после этого не забыть сделать:
source .profile

http://virtualenvwrapper.readthedocs.org/en/latest/install.html#shell-startup-file

===================================================================================
===================================================================================
===================================================================================
===================================================================================
===================================================================================
===================================================================================
===================================================================================
===================================================================================
===================================================================================
===================================================================================
===================================================================================
===================================================================================
===================================================================================
===================================================================================
===================================================================================
===================================================================================
===================================================================================