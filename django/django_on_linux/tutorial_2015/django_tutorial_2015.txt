python --version
узнаёт версию питона

====================================
sudo apt-get install python-pip

Pip это альтернатива easy_install, а как говорят сами разработчики - замена.

Как известно easy_install только часть глыбы под названием setuptools. Много копий сломано по поводу нужно ли такие двухголовое чудовище, которое позволяет продвинутым образом собирать питонячьи пакеты и их устанавливать. Или достаточно стандартного distutils. Вот тут pip выступает как противоположность, говоря - я сборкой пакетов не занимаюсь, а только их ставлю.

Pip может поставить любой пакет собранный при помощи distutils. Причем только source-пакет - никаких бинарных яиц ему и прочих setuptools'овых прибамбасов.



====================================
используем virtualenvwrapper для создания виртуального окружения с последней версей Python «внутри»
virtualenvwrapper представляет из себя удобную обёртку вокруг virtualenv.

sudo pip install virtualenvwrapper

Теперь работа с виртуальными окружениями стала еще проще:
    mkvirtualenv env_name1     - создать в папке с вирт.окружениями окружение "env_name1"
    workon env_name1              - переключится в окружение "env_name1"
    lsvirtualenv                           - вывести список доступных виртуальных окружений
    rmvirtualenv env_name1      - удалить виртуальное окружение "env_name1"
    deactivate                              - выйти из текущего виртуального окружения

====================================
создать в целевом каталоге вирт окружение tanks_project/tanks_env:
virtualenv tanks_env --python=python3.4


====================================
в ~/.profile дописать:
export WORKON_HOME=$HOME/django/tanks_project
export PROJECT_HOME=$HOME/django/tanks_project/tanks_project
source /etc/bash_completion.d/virtualenvwrapper


и из командной строки выполнить:
source .profile


====================================
теперь можно переключаться в нужное вирт.окружение с определенной версией питона:
workon tanks_env


для этого обязательно должна быть утсановлена virtualenvwrapper



====================================
установить django:
pip install django=="1.8.6"
при этом pip автоматически удаляет старую версию

внимание! на все каталоги установить права 777

====================================
способ проверить версию django:
python
import django
django.VERSION




====================================
зайти в tanks_project и создать проект:
django-admin.py startproject tanks

проект создан. он пока не имеет ни одного приложения (app_)

любой проект состоит из набора приложений

python manage.py startapp app_table

внимание! после создания приложения его необходимо добавить в конфиг:
INSTALLED_APPS 

====================================
Для запуска сервера перейдите в каталог который содежрит manage.py, и выполните команду:

python manage.py runserver
Вы увидите нечто подобное этому:

Validating models...
0 errors found.

Django version 1.0, using settings 'mysite.settings'
Development server is running at http://127.0.0.1:8000/
Quit the server with CONTROL-C.

Команда запускает сервер локально на порту 8000. Сервер принимает только локальные соединения с вашего компьютера. Теперь он запущен, посетите страницу http://127.0.0.1:8000/ с помощью браузера. Вы увидите страницу «Welcome to Django[5]». Всё работает!

админка готова к использованию:
http://127.0.0.1:8000/admin/

====================================
после установки по умолчанию django использует sqlite. это отражено в конфиге:
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}



====================================
миграции работают не как в ruby. здесь нужно ручками менять модель и потом из ком строки выполнить команду, которая снимет слепок:
python manage.py makemigrations

после этого нужно запустить миграцию:
python manage.py migrate

внимание сразу после старта приложения нужно выполнить миграцию командой:
python manage.py migrate
где она находится непонятно.

список всех миграций:
python manage.py migrate --list


====================================
Команда syncdb просто синхронизирует ваши модели в базе данных. Она просматривает все модели каждого приложения, указанного в параметре INSTALLED_APPS, проверяет наличие соответствующих таблиц в базе данных и по необходимости создаёт их. Следует отметить, что syncdb не синхронизирует изменения в моделях или удаления моделей. Если вы изменили модель или удалили её, то команда syncdb не поможет с внесением изменений в базу. (More on this in the “Making Changes to a Database Schema” section toward the end of this chapter. FIXME)

лучше использовать только миграции для работы с БД

====================================
запуск шелла для проекта:
python manage.py shell
Мы используем эту команду вместо просто “python”, потому что manage.py устанавливает переменную окружения DJANGO_SETTINGS_MODULE, которая указывает Django путь импорта для файла settings.py.

====================================
Создание пользователей
Самый простой способ создать пользователя – использовать метод create_user():

>>> from django.contrib.auth.models import User
>>> user = User.objects.create_user('john', 'lennon@thebeatles.com', 'johnpassword')

# At this point, user is a User object that has already been saved
# to the database. You can continue to change its attributes
# if you want to change other fields.
>>> user.last_name = 'Lennon'
>>> user.save()
Если вы используете интерфейс администратора Django, вы можете создать пользователя через UI.

Создание суперпользователя
Суперпользователя можно создать с помощью команды createsuperuser:

$ python manage.py createsuperuser --username=joe --email=joe@example.com
1Команда попросит ввести пароль. Пользователь будет создан сразу же по завершению команды. Если не указывать --username или the --email, команда попросит ввести их.

====================================
====================================
вывод объектов через шелл:

python manage.py shell
>>> from app_table.models import Tank
>>> print(Tank.objects.all())
[<Tank: Tank object>]


====================================
====================================
====================================
====================================
====================================
====================================
====================================
====================================
====================================
====================================
====================================
====================================
====================================
====================================
====================================
====================================
====================================