awesome_nested_set
https://github.com/collectiveidea/awesome_nested_set
https://github.com/collectiveidea/awesome_nested_set/wiki/Awesome-nested-set-cheat-sheet

========================
class Category < ActiveRecord::Base
  acts_as_nested_set
end

========================
создать прилодение и scaffold Category
3 поля добавить ручками

  create_table "categories", force: :cascade do |t|
    t.string   "title"
    t.text     "desc"
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
    t.integer  "parent_id"
    t.integer  "lft"
    t.integer  "rgt"
  end



========================
заполним БД
seeds:
Category.create!(title: 'title 1', desc: 'desc 1')
Category.create!(title: 'title 2', desc: 'desc 2')
Category.create!(title: 'title 3', desc: 'desc 3')
Category.create!(title: 'title 4', desc: 'desc 4')
Category.create!(title: 'title 5', desc: 'desc 5')

science = Category.create!(:title => 'Science')

physics = Category.create!(:title => 'Physics')
physics.move_to_child_of(science)

gravity = Category.create!(:title => 'Gravity')
gravity.move_to_child_of(physics)

fly = Category.create!(:title => 'Fly')
fly.move_to_child_of(gravity)

========================
из контроллера передаём для show  и index:
class CategoriesController < ApplicationController
  before_action :set_category, only: [:show, :edit, :update, :destroy]

  def index
    @categories = Category.roots
    #@root_categories = Categories.roots
  end

  def show
    @categories = Category.find_by_id(params[:id]).self_and_descendants
  end

  # GET /categories/new
  def new
    @category = Category.new
  end

  private
    # Use callbacks to share common setup or constraints between actions.
    def set_category
      @category = Category.find(params[:id])
    end

    # Never trust parameters from the scary internet, only allow the white list through.
    def category_params
      params.require(:category).permit(:title, :desc)
    end
end


========================
index.html.erb:
<table>
  <thead>
    <tr>
      <th>Title</th>
      <th>Desc</th>
      <th colspan="3"></th>
    </tr>
  </thead>

  <tbody>
    <% @categories.each do |category| %>
      <tr>
        <td><%= category.title %></td>
        <td><%= category.desc %></td>
        <td><%= link_to 'Show', category %></td>
        <td><%= link_to 'Edit', edit_category_path(category) %></td>
        <td><%= link_to 'Destroy', category, method: :delete, data: { confirm: 'Are you sure?' } %></td>
      </tr>
    <% end %>
  </tbody>
</table>

<br>

<%= link_to 'New Category', new_category_path %>




========================
show.html.erb:
<strong><%= @categories.first.title %></strong>

<% @categories[1..-1].each do |category| %>
  <div style="padding-left: <%= category.level %>0px"><%= link_to category.title, category %></div>
<% end %>



but not:
<ul>
  <% @categories.each do |category| %>
    <li>
      <% if category.root? %>
        <strong><%= category.title %></strong>
      <% else %>
        <div style="padding-left: <%= category.level %>0px"><%= category.title %>(<%= category.level %>)</div>
      <% end %>
    </li>
  <% end %>
</ul>

========================
сделать ссылкой каждый объект верхнего уровня

========================
========================
========================
========================
========================
========================
========================
Accessing Data

Class methods

Category.root   the first root node
Category.roots  all root nodes
Instance methods

my_cat.root                  root for this node
my_cat.level                 the level of this object in the tree (e.g. root = 0)
my_cat.parent                the node's immediate parent
my_cat.children              array of immediate children (just those in the next level)
my_cat.ancestors             array of all parents, parents' parents, etc, excluding self
my_cat.self_and_ancestors    array of all parents, parents' parents, etc, including self
my_cat.siblings              array of brothers and sisters (all at that level), excluding self
my_cat.self_and_siblings     array of brothers and sisters (all at that level), including self
my_cat.descendants           array of all children, children's children, etc., excluding self
my_cat.self_and_descendants  array of all children, children's children, etc., including self
my_cat.leaves                array of all descendants that have no children
Instance methods: Predicates (these don't need to hit the DB to respond)

my_cat.root?                         true if this is a root node
my_cat.child?                        true if this is a child node (i.e. it has a parent)
my_cat.is_ancestor_of?(obj)          true if nested by any obj
my_cat.is_or_is_ancestor_of?(obj)    true if nested by any obj or self is obj
my_cat.is_descendant_of?(obj)        true if self is nested under obj
my_cat.is_or_is_descendant_of?(obj)  true if self is nested under obj or self is obj
my_cat.leaf?                         true if this is a leaf node (i.e. it has no children)

========================
========================
========================
========================
========================
========================
========================
========================
========================