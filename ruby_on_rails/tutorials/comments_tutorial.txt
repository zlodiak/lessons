комментарии на основе gem ancestry
gem 'ancestry'

bundle install

========================================
есть scaffold Post и система входа пользователей(devise). добавим к каждому посту дерево комментариев. без пагинации


========================================
в контроллере comments оставляем только следующие экшены:
class CommentsController < InheritedResources::Base
  def new
    @comment = Comment.new(:parent_id => params[:parent_id])
    @parent_id = params[:parent_id]
    @post = Post.find(params[:post_id])
  end

  def create
    @comment = Comment.new(comment_params)
    @comment.user = current_user
    @comment.post_id = comment_params[:post_id]

    respond_to do |format|
      if @comment.save
        format.html { redirect_to user_post_path(current_user.id, comment_params[:post_id]), notice: 'comment was successfully created.' }
        format.json { render :show, status: :created, location: @comment }
      else
        format.html { render :new }
        format.json { render json: @comment.errors, status: :unprocessable_entity }
      end
    end
  end

  private
    def set_comment
      @comment = Comment.find(params[:id])
    end

    def comment_params
      params.require(:comment).permit(:body, :parent_id, :post_id)
    end
end



остальное переносим в Posts контроллер

========================================
class PostsController < InheritedResources::Base
  before_action :set_post, only: [:show, :edit, :update, :destroy]
  before_action :authenticate_user!, only: [:create, :edit, :update, :destroy]

  def index
    @posts = Post.where(id: params[:id]).paginate(page: params[:page], :per_page => 10)
  end

  def show
    @comment = Comment.new
    @comments = Comment.where(post_id: @post.id)#.paginate(page: params[:page], :per_page => 6)
    @likes_count = PostLike.where(post_id: @post.id).count
    
    if user_signed_in?
      if PostLike.where(user_id: current_user.id, post_id: @post.id).count > 0
        # @already_like_flag = true 
        @already_like_message = 'Вы уже проголосовали' 
      else
        # @already_like_flag = false 
        @already_like_message = 'Вы ещё не проголосовали' 
      end
    end
  end

  def new
    @post = Post.new
  end

  def edit
  end

  def create
    @post = Post.new(post_params)
    @post.user = current_user

    if @post.save      
      redirect_to @post, notice: 'posts was successfully created.'
    else
      render :new 
    end
  end

  def update
    respond_to do |format|
      if @post.update(post_params)
        format.html { redirect_to @post, notice: 'posts was successfully updated.' }
        format.json { render :show, status: :ok, location: @post }
      else
        format.html { render :edit }
        format.json { render json: @post.errors, status: :unprocessable_entity }
      end
    end
  end

  def destroy
    @post.destroy
    respond_to do |format|
      format.html { redirect_to post_url, notice: 'posts was successfully destroyed.' }
      format.json { head :no_content }
    end
  end

  def like_change
    like = PostLike.where(user_id: current_user.id, post_id: params[:post_id])

    if like.count > 0
      like.first.destroy
    else
      PostLike.create(user_id: current_user.id, post_id: params[:post_id])
    end

    redirect_to user_post_path(current_user, params[:post_id])

  end

  def all_posts
    @posts = Post.paginate(page: params[:page], :per_page => 10)
  end

  private
    def set_post
      @post = Post.find(params[:id])
    end

    def post_params
      params.require(:post).permit(:title, :body, :post_id)
    end
end



========================================

каждый коммент связан через fk с user и post

ActiveRecord::Schema.define(version: 20151116070827) do


  create_table "comments", force: :cascade do |t|
    t.text     "body"
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
    t.integer  "user_id"
    t.integer  "post_id"
    t.string   "ancestry"
  end

  add_index "comments", ["ancestry"], name: "index_comments_on_ancestry"

  create_table "posts", force: :cascade do |t|
    t.string   "title"
    t.text     "body"
    t.datetime "created_at",                 null: false
    t.datetime "updated_at",                 null: false
    t.integer  "post_status_id", default: 1
    t.integer  "user_id"
  end

  create_table "users", force: :cascade do |t|
    t.string   "email",                  default: "",    null: false
    t.string   "encrypted_password",     default: "",    null: false
    t.string   "reset_password_token"
    t.datetime "reset_password_sent_at"
    t.datetime "remember_created_at"
    t.integer  "sign_in_count",          default: 0,     null: false
    t.datetime "current_sign_in_at"
    t.datetime "last_sign_in_at"
    t.string   "current_sign_in_ip"
    t.string   "last_sign_in_ip"
    t.datetime "created_at",                             null: false
    t.datetime "updated_at",                             null: false
    t.string   "confirmation_token"
    t.datetime "confirmed_at"
    t.datetime "confirmation_sent_at"
    t.boolean  "superadmin",             default: false, null: false
    t.integer  "user_status_id",         default: 1
  end

  add_index "users", ["confirmation_token"], name: "index_users_on_confirmation_token", unique: true
  add_index "users", ["email"], name: "index_users_on_email", unique: true
  add_index "users", ["reset_password_token"], name: "index_users_on_reset_password_token", unique: true

end



========================================
порядок добавления комментариев такой. под постом есть форма для добавления коневого комментария к данному посту. каждый комментарий имеет ссылку 'reply', которая ведёт на отдельную страничку с формой добавления вложенного комментария(на этой страничке к адресу добавляется гет-парамет ?parent_id=49 , то есть id родительского комментария)

это достигается за счёт:
  def new
    @comment = Comment.new(:parent_id => params[:parent_id])
    ............
    ...
  end

далее при создании комментария parent_id используется так:
  def create
    @comment = Comment.new(comment_params)
    @comment.user = current_user
    @comment.post_id = comment_params[:post_id]

    respond_to do |format|
      if @comment.save
        format.html { redirect_to user_post_path(current_user.id, comment_params[:post_id]), notice: 'comment was successfully created.' }
        format.json { render :show, status: :created, location: @comment }
      else
        format.html { render :new }
        format.json { render json: @comment.errors, status: :unprocessable_entity }
      end
    end
  end

  private
    def set_comment
      @comment = Comment.find(params[:id])
    end

    def comment_params
      params.require(:comment).permit(:body, :parent_id, :post_id)
    end

========================================
выводятся комментарии к посту в виде дерева.

post controller:
  def show
    @comment = Comment.new
    @comments = Comment.where(post_id: @post.id)


comments helper:    
module CommentsHelper
  def nested_comments(comments)
    comments.map do |message, sub_comments|
      render(message) + content_tag(:div, nested_comments(sub_comments), :class => "nested_comments")
    end.join.html_safe
  end  
end


далее выводим в шаблоне форму для добавления корневого комментария(со скрытыми полями) и хелпер
post show view:
<div class="comments_area">
  <% if @comment %>
    <%= form_for [@post, @comment] do |f| %>
      <% if @comment.errors.any? %>
        <div id="error_explanation">
          <h2><%= pluralize(@comment.errors.count, "error") %> prohibited this comment from being saved:</h2>

          <ul>
          <% @comment.errors.full_messages.each do |message| %>
            <li><%= message %></li>
          <% end %>
          </ul>
        </div>
      <% end %>

      <%= f.hidden_field :parent_id %>
      <%= f.hidden_field :post_id, :value => @post.id %>

      <div class="field">
        <%= f.label :body %><br>
        <%= f.text_area :body %>
      </div>
      <div class="actions">
        <%= f.submit %>
      </div>
    <% end %>
  <% end %>

  <br />

  <%= nested_comments @comments.arrange(:order => :created_at) %>
</div>


========================================
форма для добавления вложенного комментария содержится в comments controller new и в соответствующем представлении

========================================
в БД, в таблице comments , в колонке ancestry данные хранятся не в атомарном виде. так работает gem ancestry

========================================
========================================
========================================
========================================
========================================
========================================
========================================
========================================
========================================
========================================
========================================
========================================
========================================
========================================
========================================
========================================
========================================
========================================
========================================
========================================
========================================