создадим админпанель способом, рекомендованным в документации. то есть через дополнительное пространство имён.
при этом для роутов, вьюх и контроллеров будет создано отдельное пространство имен, которое позволит более разумно дублировать функционал для админки и публичной части с возможностью распределения прав доступа и фоформления

для чистоты задачи сделаем админку для ресурсов dicuments и news

=================
routes:
Testpager::Application.routes.draw do
  resources :news, only: [:index, :show]

  resources :documents, only: [:index, :show, :destroy]

  namespace :admin do
    resources :documents, only: [:index, :show, :destroy, :edit, :update, :new, :create]
    resources :news,      only: [:index, :show, :destroy, :edit, :update, :new, :create]
    get "admin" => 'documents#index'
  end

  get "contacts/index"
  get "services/index"
  get "index/index"
  get "admin/index"
  
  root 'index#index'
end

=================
в каталогах layout, views, controllers создадим каталог admin, в котором будут храниться соответствующие файлы.
при этом каталоги _shared, models оставим без изменений

=================
контроллер для публичной части:
class DocumentsController < ApplicationController

  before_action :set_document, only: [:show, :edit, :update, :destroy]

  def index
    @documents = Document.all.paginate(page: params[:page], per_page: 10)
  end

  def show
  end

  def new
    @document = Document.new
  end

  def edit
  end

  def create
    @document = Document.new(document_params)

    respond_to do |format|
      if @document.save
        format.html { redirect_to @document, notice: 'Document was successfully created.' }
        format.json { render action: 'show', status: :created, location: @document }
      else
        format.html { render action: 'new' }
        format.json { render json: @document.errors, status: :unprocessable_entity }
      end
    end
  end

  def update
    respond_to do |format|
      if @document.update(document_params)
        format.html { redirect_to @document, notice: 'Document was successfully updated.' }
        format.json { head :no_content }
      else
        format.html { render action: 'edit' }
        format.json { render json: @document.errors, status: :unprocessable_entity }
      end
    end
  end

  def destroy
    @document.destroy
    respond_to do |format|
      format.html { redirect_to documents_url }
      format.json { head :no_content }
    end
  end

  private
    def set_document
      @document = Document.find(params[:id])
    end

    def document_params
      params[:document]
    end
end



=================
контроллер для админ части:
class Admin::DocumentsController < ApplicationController

  before_action :set_document, only: [:show, :edit, :update, :destroy]

  layout 'admin/admin'

  def index
    @documents = Document.all.paginate(page: params[:page], per_page: 10)
  end  

  def show
  end  

  def new
    @document = Document.new
  end

  def edit
  end

  def create
    @document = Document.new(document_params)
    @document.save
    if @document.errors.empty?
      redirect_to @document
    else
      render 'new'
    end
  end

  def update
    if @document.update(document_params)
      redirect_to admin_document_path(@document)
    else
      render action: 'edit'
    end
  end

  def destroy
    if @document.destroy 
      redirect_to admin_documents_url
    end
  end

  private
    def set_document
      @document = Document.find(params[:id])
    end

    def document_params
      params.require(:document).permit(:title, :body)
    end
    
end


=================
лейоуи для публичной части: 
<!DOCTYPE html>

<html>
	<head>
		<meta charset="utf-8" />
		
		<title>Test</title>	
		
		<%= stylesheet_link_tag    "application", media: "all", "data-turbolinks-track" => true %>
		<%= javascript_include_tag "application", "data-turbolinks-track" => true %>
		<%= csrf_meta_tags %>		
	</head>
	
	<body class="common_page">		
		<div class="wrap">				
			<header class="header">
				<div class="header_inner width1100">
					<h1 class="h1 hide">Тестовое задание для определения навыков</h1>
					
					<a class="logo" href="/">
						<%= image_tag "images/logo.jpg", class: "logo_pic", size: "350x170", alt: "Test logo" %>
					</a>
					
					<%= render 'shared/nav_top' %>	

					<%= render 'shared/nav_main' %>	

					<%= render 'shared/slider_head' %>	
				</div>
			</header>
			
			<div class="content">
				<div class="content_inner width1100 clearfix">
					<%= yield :offers %>	
					
					<div class="main content_format">
						<%= yield %>
					</div>
				</div>
			</div>
			
			<div class="footer_correct"></div>
		</div>
		
		<%= render 'shared/footer' %>			

		<script>
			$( document ).ready(function() {
				$('#slider').nivoSlider();
			});
		</script>					
	</body>
</html>



=================
лейоут для админки:
<!DOCTYPE html>

<html>
	<head>
		<meta charset="utf-8" />
		
		<title>Test - admin panel</title>	
		
		<%= stylesheet_link_tag    "application", media: "all", "data-turbolinks-track" => true %>
		<%= javascript_include_tag "application", "data-turbolinks-track" => true %>
		<%= csrf_meta_tags %>		
	</head>
	
	<body class="admin_page">		
		<div class="wrap">				
			<header class="header">
				<div class="header_inner width1100">
					<h1 class="h1 hide">Тестовое задание для определения навыков</h1>
					
					<a class="logo" href="/">
						<%= image_tag "images/logo.jpg", class: "logo_pic", size: "350x170", alt: "Test logo" %>
					</a>

					<%= render 'shared/nav_top' %>	

					<%= render 'shared/nav_main_admin' %>	
				</div>
			</header>
			
			<div class="content">
				<div class="content_inner width1100 clearfix">
					<div class="main content_format">
						<%= yield %>
					</div>
				</div>
			</div>
			
			<div class="footer_correct"></div>
		</div>
		
		<%= render 'shared/footer' %>								
	</body>
</html>



=================
модель одна и та же:
class Document < ActiveRecord::Base

  validates :title, presence: true
  validates :body, presence: true

end


=================
миграция:
class CreateDocuments < ActiveRecord::Migration
  def change
    create_table :documents do |t|
      t.string :title
      t.text :body      

      t.timestamps
    end
  end
end


=================
=================
=================
=================
=================
=================
=================
=================
=================
=================
=================
=================
=================
=================
=================
=================
=================
=================
=================
=================
=================
=================
=================
=================
=================
=================
=================
=================
=================
=================
=================
=================